apply plugin: LiquibasePlugin

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import liquibase.integration.commandline.Main

// buildscript means these things are LOADABLE for the build script...
buildscript { 
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.liquibase:liquibase-core:2.0.1'
    classpath 'com.h2database:h2:1.3.153'
  }
}

// DSL to describe what a DATABASE is...
class Database {
	def url
	def username
	def password
	String name
	
	Database(String name) {
		this.name = name
	}
}

// Encapsulation for a collection of databases we will use
class LiquibaseExtension {
	NamedDomainObjectContainer<Database> databases
	
	LiquibaseExtension(NamedDomainObjectContainer<Database> databases) {
		this.databases = databases
	}
	
	void databases(Closure c) {
		databases.configure(c)
	}
}

// Gradle Plugin API - see Javadocs and Tim's new book
class LiquibasePlugin implements Plugin<Project> {
	
	void apply(Project project) {
	
		def databases = project.container(Database)
		project.extensions.create("liquibase", LiquibaseExtension, databases)

		['generateChangeLog','changeLogSync','update'] { taskName ->
			project.task(taskName, type: LiquibaseTask) {
				command = taskName
				group = 'Liquibase'
			}	
		}

		
	}
}

class LiquibaseTask extends DefaultTask { 
	Database database
	File changeLogFile
	def command

	// This annotation says: "what does this task do at Execution phase of lifecycle"
	@TaskAction
	def liquibaseAction() { 
		def args = ["--url=${database.url}", 
					"--username=${database.username}",
					"--password=${database.password}",
					"--changeLogFile=${changeLogFile.absolutePath}",
					command]

		Main.main(args as String[])
	}
}	 


liquibase {
  databases {
    sandbox {
      url = 'jdbc:h2:db/gradle_example_database;FILE_LOCK=NO'
      username = 'sa'
      password = ''
    }
  }
}

generateChangeLog {
	changeLogFile = project.file('changelog.xml')
	database = liquibase.databases.sandbox
}


/*
defaultDatabase = liquibase.databases.sandbox
changeLogSync.changeLogFile = project.file('changelog.xml')
update.changeLogFile = project.file('changelog.xml')
*/
